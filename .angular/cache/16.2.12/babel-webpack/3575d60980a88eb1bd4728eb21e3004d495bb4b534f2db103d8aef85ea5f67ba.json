{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\nexport let RegisterComponent = class RegisterComponent {\n  constructor(_authService) {\n    this._authService = _authService;\n    this.displayError = '';\n    this.registerForm = new FormGroup({\n      name: new FormControl(null, [Validators.required, Validators.maxLength(15), Validators.minLength(3)]),\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      password: new FormControl(null, [Validators.required, Validators.pattern(/^[A-Z][a-z0-9]{3,8}$/)]),\n      rePassword: new FormControl(null, [Validators.required, RxwebValidators.compare({\n        fieldName: 'password'\n      })]),\n      phone: new FormControl(null, [Validators.required, Validators.pattern(/^01[0125][0-9]{8}$/)])\n    });\n  }\n  register(form) {\n    console.log(form);\n    this.allControlsTouched(form);\n    if (form.valid) {\n      this._authService.signUp(form.value).subscribe({\n        next: data => {\n          console.log(data);\n        },\n        error: err => {\n          console.log(err);\n          this.displayError = err.error.massege;\n        }\n      });\n    }\n  }\n  allControlsTouched(form) {\n    // array of value\n    Object.values(form.controls).forEach(control => {\n      control.markAsTouched();\n      if (control.controls) {\n        this.allControlsTouched(control);\n      }\n    });\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","RxwebValidators","RegisterComponent","constructor","_authService","displayError","registerForm","name","required","maxLength","minLength","email","password","pattern","rePassword","compare","fieldName","phone","register","form","console","log","allControlsTouched","valid","signUp","value","subscribe","next","data","error","err","massege","Object","values","controls","forEach","control","markAsTouched","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\ME\\Documents\\angular\\e--commerce\\src\\app\\pages\\register\\register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\nimport { AuthService } from 'src/app/Services/auth.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n})\nexport class RegisterComponent {\n\n  displayError:string='';\n  registerForm: FormGroup = new FormGroup({\n    name: new FormControl(null, [\n      Validators.required,\n      Validators.maxLength(15),\n      Validators.minLength(3),\n    ]),\n    email: new FormControl(null, [Validators.required, Validators.email]),\n    password: new FormControl(null, [\n      Validators.required,\n      Validators.pattern(/^[A-Z][a-z0-9]{3,8}$/),\n    ]),\n    rePassword: new FormControl(null, [\n      Validators.required,\n      RxwebValidators.compare({fieldName:'password' })\n    ]),\n    phone: new FormControl(null, [\n      Validators.required,\n      Validators.pattern(/^01[0125][0-9]{8}$/),\n    ]),\n  });\n\n\nconstructor( private _authService:AuthService){\n\n\n\n}\n\n  register(form: FormGroup) {\n    console.log(form);\n       \n    this.allControlsTouched(form);\n\n    if(form.valid){\n\n     this._authService.signUp(form.value).subscribe(\n      {\n         next:(data)=>{\n\n          console.log(data);\n          \n         },\n         error:(err)=>{\n          console.log(err);\n          this.displayError=err.error.massege;\n          \n         }\n\n      }\n     )\n    }\n  }\n\n  allControlsTouched(form: FormGroup) {\n    // array of value\n    Object.values(form.controls).forEach((control: any) => {\n      control.markAsTouched();\n      if (control.controls) {\n        this.allControlsTouched(control);\n      }\n    });\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AACnE,SAASC,eAAe,QAAQ,iCAAiC;AAQ1D,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAyB9BC,YAAqBC,YAAwB;IAAxB,KAAAA,YAAY,GAAZA,YAAY;IAvB/B,KAAAC,YAAY,GAAQ,EAAE;IACtB,KAAAC,YAAY,GAAc,IAAIP,SAAS,CAAC;MACtCQ,IAAI,EAAE,IAAIT,WAAW,CAAC,IAAI,EAAE,CAC1BE,UAAU,CAACQ,QAAQ,EACnBR,UAAU,CAACS,SAAS,CAAC,EAAE,CAAC,EACxBT,UAAU,CAACU,SAAS,CAAC,CAAC,CAAC,CACxB,CAAC;MACFC,KAAK,EAAE,IAAIb,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACW,KAAK,CAAC,CAAC;MACrEC,QAAQ,EAAE,IAAId,WAAW,CAAC,IAAI,EAAE,CAC9BE,UAAU,CAACQ,QAAQ,EACnBR,UAAU,CAACa,OAAO,CAAC,sBAAsB,CAAC,CAC3C,CAAC;MACFC,UAAU,EAAE,IAAIhB,WAAW,CAAC,IAAI,EAAE,CAChCE,UAAU,CAACQ,QAAQ,EACnBP,eAAe,CAACc,OAAO,CAAC;QAACC,SAAS,EAAC;MAAU,CAAE,CAAC,CACjD,CAAC;MACFC,KAAK,EAAE,IAAInB,WAAW,CAAC,IAAI,EAAE,CAC3BE,UAAU,CAACQ,QAAQ,EACnBR,UAAU,CAACa,OAAO,CAAC,oBAAoB,CAAC,CACzC;KACF,CAAC;EAOJ;EAEEK,QAAQA,CAACC,IAAe;IACtBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IAEjB,IAAI,CAACG,kBAAkB,CAACH,IAAI,CAAC;IAE7B,IAAGA,IAAI,CAACI,KAAK,EAAC;MAEb,IAAI,CAACnB,YAAY,CAACoB,MAAM,CAACL,IAAI,CAACM,KAAK,CAAC,CAACC,SAAS,CAC7C;QACGC,IAAI,EAAEC,IAAI,IAAG;UAEZR,OAAO,CAACC,GAAG,CAACO,IAAI,CAAC;QAElB,CAAC;QACDC,KAAK,EAAEC,GAAG,IAAG;UACZV,OAAO,CAACC,GAAG,CAACS,GAAG,CAAC;UAChB,IAAI,CAACzB,YAAY,GAACyB,GAAG,CAACD,KAAK,CAACE,OAAO;QAEpC;OAEF,CACD;;EAEJ;EAEAT,kBAAkBA,CAACH,IAAe;IAChC;IACAa,MAAM,CAACC,MAAM,CAACd,IAAI,CAACe,QAAQ,CAAC,CAACC,OAAO,CAAEC,OAAY,IAAI;MACpDA,OAAO,CAACC,aAAa,EAAE;MACvB,IAAID,OAAO,CAACF,QAAQ,EAAE;QACpB,IAAI,CAACZ,kBAAkB,CAACc,OAAO,CAAC;;IAEpC,CAAC,CAAC;EACJ;CACD;AAjEYlC,iBAAiB,GAAAoC,UAAA,EAL7BzC,SAAS,CAAC;EACT0C,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACWvC,iBAAiB,CAiE7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}